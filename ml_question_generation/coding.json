[{"question": "Write a procedure that takes a 2D array and return the final column as a two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes an array and returns the transpose of the array. (Can we guess what is needed?)", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that take a 2D array and returns the final column as a two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "The function below should generate a 2-dimensional numpy array of size 2x4. Fill in the function.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=2 and dims[1]=4"}, {"question": "Write a procedure that takes a 2D array and returns the final column as a two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes an array to find the transpose. Arrays?", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "The function below should generate a 2-dimensional numpy array of size 4x0. Fill in the function.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=4 and dims[1]=0"}, {"question": "The function below should generate a 2-dimensional numpy array of size 3x2. Fill in the function.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=3 and dims[1]=2"}, {"question": "Write a procedure that takes an array and returns the transpose of the array. Then manipulate the object to use the procedure for a read_write_read_return.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes a 2d array and returns the ending column as a two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a column vector. We will just refer to that list as a single numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a column vector containing those numbers. Then output two integer arrays with numpy arrays.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a list of numbers and returns a numpy array. In Python, we compare to a binary Array of numpy arrays with a binary array of numbers. If you ask the numpy array in a math program, we know its used.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes an array and returns the transpose of the array array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes a list of numbers and returns a numpy array representing a row vector containing those numbers (in prefix) in 2D. If the list has all numbers, then you return the exact number in which the array was created.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes a list of numbers and returns a two-dimensional numpy array representing a column vector containing those numbers. *", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector of those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes a 2D array and returns the final column as a 2D array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that take a list of numbers and return a numpy array representing a column vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a 2D array and returns the final column as a two dimensional array. This can be done by writing a one dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector containing those numbers. The following are examples:", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Give a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector. Also, write methods.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes a list of numbers and returns a numpy array representing a vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes an array and returns the transpose of the array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector that contains those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "A procedure that takes a list of numbers and returns a numpy array representing a column vector containing those numbers. Write a procedure that takes a list of numbers and returns a list of numpy array of number for the next column if the number(es) has not been found.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a regular procedure that takes an array and returns the transpose of the array. The constructor then returns (the source code) the array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure which takes an array and returns the transpose of the array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Complete the function below to return a 6x9 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=6 and dims[1]=9"}, {"question": "Write a procedure that takes a list of names and returns a 2D numpy array representing a column vector containing those numbers. [Draft]", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a row vector containing the number(s), vector(s, expressions, etc).", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "What is the procedure where we take an array and return the transpose of the array?", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes the list of numbers and returns a 2D numpy array representing a number vector. (This is often referred to as numpy.)", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a procedure that takes an array and returns the transpose of the array. C:", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a column vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a 2D array and returns the final column as a two-dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes a 2D array and returns the last column as a two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Complete the function below to return a 1x8 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=1 and dims[1]=8"}, {"question": "Complete the function below to return a 7x0 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=7 and dims[1]=0"}, {"question": "Complete the function below to return a 1x7 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=1 and dims[1]=7"}, {"question": "Complete the function below to return a 0x4 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=0 and dims[1]=4"}, {"question": "Complete the function below to return a 6x6 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=6 and dims[1]=6"}, {"question": "Write a procedural step that takes a 2D array and returns the final column as a Two dimensional array.", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array representing a column vector containing those numbers. When I look at a list of numbers, I see this as the example.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes a 2D array and returns the final column as a 2D array. See -> //./", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "Write a code that takes an array and returns the transpose of the array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Write a procedure that takes a list of numbers and returns a 2D numpy array with a column vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Writing a procedure that takes a list of numbers and returns a 2D numpy array representing one column vector vector of that numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A]).transpose()\n            output = cv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "cv"}, {"question": "Write a procedure that takes an array and returns the transposed of the array.", "test": "import numpy as np\n            A=np.array([[1,2],[3,4]])\n            expected = np.array([[1,3],[2,4]])\n            output = transpose(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "transpose"}, {"question": "Complete the function below to return a 3x3 numpy array containing any values you wish.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=3 and dims[1]=3"}, {"question": "Write a procedure that takes a list of numbers and returns a numpy array that represents a row vector containing those numbers.", "test": "import numpy as np\n            A=[1,2,3,4,5]\n            expected = np.array([A])\n            output = rv(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "rv"}, {"question": "Write a method that takes a 2D array and returns the final column as a two dimensional array. What is the difference?", "test": "import numpy as np\n            A=np.array([[1,2,3,4], [2,3,4,5]])\n            expected = np.array([[4],[5]])\n            output = index_final_col(A)\n            assert output == expected\n            ", "args": ["A"], "func_name": "index_final_col"}, {"question": "The function below should generate a 2-dimensional numpy array of size 3x4. Fill in the function.", "args": [], "func_name": "create_array", "test": "import numpy as np\n    output = create_array()\n    dims = output.shape\n    assert len(dims)==2\n    assert dims[0]=3 and dims[1]=4"}]